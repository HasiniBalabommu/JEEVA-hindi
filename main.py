import os
import queue
import sounddevice as sd
import vosk
import json
import tempfile
from gtts import gTTS
import pygame
import time
from difflib import SequenceMatcher

# Initialize pygame for playing audio
pygame.mixer.init()

# Initialize queue and sample rate
q = queue.Queue()
sample_rate = 16000

# Load Vosk Hindi model
model_path = "vosk-model-small-hi-0.22"
if not os.path.exists(model_path):
    print("тЭМ Hindi model not found. Please download it from: https://alphacephei.com/vosk/models")
    exit()

model = vosk.Model(model_path)
rec = vosk.KaldiRecognizer(model, sample_rate)

# Callback function to collect audio
def callback(indata, frames, time, status):
    if status:
        print("тЪая╕П", status)
    q.put(bytes(indata))

# Function to correct similar recognition errors
def improve_text(text):
    corrections = {
        "namastey": "namaste", "namasthy": "namaste", "namste": "namaste", "hello": "namaste",
        "fertile": "urvarak", "manure": "urvarak", "khaad": "urvarak", "urvarakh": "urvarak",
        "barish": "baarish", "mosam": "mausam", "baaris": "baarish", "rain": "baarish",
        "disease": "bimari", "illness": "bimari", "kit": "bimari", "rog": "bimari",
        "rate": "daam", "cost": "daam", "price": "daam", "keemat": "daam", "kimat": "daam",
        "sahay": "sahayata", "halp": "sahayata", "madad": "sahayata"
    }
    words = text.split()
    return " ".join([corrections.get(word, word) for word in words])

# Fuzzy match to allow slight mistakes
def fuzzy_match(keywords, sentence, threshold=0.7):
    for keyword in keywords:
        for word in sentence.split():
            if SequenceMatcher(None, word, keyword).ratio() >= threshold:
                return True
    return False

# Function to get response based on query
def get_response(query):
    query = query.lower().strip()
    print(f"ЁЯдЦ рдкреНрд░реЛрд╕реЗрд╕ рдХрд░ рд░рд╣рд╛ рд╣реВрдБ: {query}")

    if fuzzy_match(["namaste", "рдирдорд╕реНрддреЗ", "hello"], query):
        return "рдирдорд╕реНрддреЗ! рдореИрдВ рдЬреАрд╡рди рд╕рд╣рд╛рдпрдХ рд╣реВрдБ, рдЖрдкрдХреА рдХреНрдпрд╛ рд╕рд╣рд╛рдпрддрд╛ рдХрд░ рд╕рдХрддрд╛ рд╣реВрдБ?"
    elif fuzzy_match(["sahayata", "help", "рдорджрдж", "рд╕рд╣рд╛рдпрддрд╛"], query):
        return "рдореИрдВ рдЦреЗрддреА, рдЙрд░реНрд╡рд░рдХ, рдореМрд╕рдо, рдмрд╛рдЬрд╛рд░ рднрд╛рд╡ рдФрд░ рд░реЛрдЧреЛрдВ рдХреА рдЬрд╛рдирдХрд╛рд░реА рджреЗ рд╕рдХрддрд╛ рд╣реВрдБред"
    elif fuzzy_match(["urvarak", "рдЦрд╛рдж", "fertilizer"], query):
        return "рдЖрдк рдирд╛рдЗрдЯреНрд░реЛрдЬрди рдФрд░ рдЬреИрд╡рд┐рдХ рдЦрд╛рдж рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред"
    elif fuzzy_match(["baarish", "рдореМрд╕рдо", "рд╡рд░реНрд╖рд╛", "рдмрд░рд╕рд╛рдд"], query):
        return "рдЖрдЬ рдЖрдкрдХреЗ рдХреНрд╖реЗрддреНрд░ рдореЗрдВ рдмрд╛рд░рд┐рд╢ рдХреА 60 рдкреНрд░рддрд┐рд╢рдд рд╕рдВрднрд╛рд╡рдирд╛ рд╣реИред"
    elif fuzzy_match(["bimari", "рд░реЛрдЧ", "рдХреАрдЯ", "disease"], query):
        return "рдЖрдк рдиреАрдо рддреЗрд▓ рдХрд╛ рдЫрд┐рдбрд╝рдХрд╛рд╡ рдХрд░реЗрдВ, рдпрд╣ рдХреАрдЯреЛрдВ рдХреЛ рд░реЛрдХрдиреЗ рдореЗрдВ рд╕рд╣рд╛рдпрдХ рд╣реЛрдЧрд╛ред"
    elif fuzzy_match(["daam", "рдХреАрдордд", "рднрд╛рд╡", "rate", "price"], query):
        return "рдЖрдЬ рдЯрдорд╛рдЯрд░ рдХрд╛ рднрд╛рд╡ тВ╣20 рдкреНрд░рддрд┐ рдХрд┐рд▓реЛ рд╣реИред"
    else:
        return f"рдЖрдкрдиреЗ '{query}' рдХрд╣рд╛ред рдХреГрдкрдпрд╛ рдЦреЗрддреА, рдореМрд╕рдо, рдЦрд╛рдж рдпрд╛ рдХреАрдордд рд╕реЗ рдЬреБрдбрд╝рд╛ рд╕рд╡рд╛рд▓ рдкреВрдЫреЗрдВред"

# тЬЕ Updated Function to speak the response using gTTS and save to a safe location
def speak(text):
    try:
        # Save file in Documents folder with a unique name
        filename = f"jeeva_response_{int(time.time())}.mp3"
        file_path = os.path.join(os.path.expanduser("~/Documents"), filename)

        # Convert text to speech and save
        tts = gTTS(text=text, lang='hi')
        tts.save(file_path)

        # Play audio
        pygame.mixer.music.load(file_path)
        pygame.mixer.music.play()

        # Wait for playback to finish
        while pygame.mixer.music.get_busy():
            time.sleep(0.1)

        # Now wait briefly to ensure the file is unlocked
        time.sleep(0.5)  # Ensure pygame releases the file
        os.remove(file_path)

    except Exception as e:
        print("ЁЯФК рдмреЛрд▓рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐:", e)


# Main function to run the assistant
def run_jeeva():
    print("ЁЯОЩя╕П рдЬреАрд╡рди рд╣рд┐рдВрджреА рд╡реЙрдпрд╕ рдЕрд╕рд┐рд╕реНрдЯреЗрдВрдЯ рд╕рдХреНрд░рд┐рдп рд╣реИ... рдмреЛрд▓реЗрдВ!\n")
    with sd.RawInputStream(samplerate=sample_rate, blocksize=8000, dtype='int16',
                           channels=1, callback=callback):
        while True:
            data = q.get()
            if rec.AcceptWaveform(data):
                result = rec.Result()
                text = json.loads(result)["text"]
                if text:
                    corrected = improve_text(text)
                    print(f"\nЁЯСВ рдЖрдкрдиреЗ рдХрд╣рд╛: {corrected}")
                    response = get_response(corrected)
                    print(f"ЁЯЧгя╕П рдЬреАрд╡рди: {response}")
                    speak(response)

# Start the assistant
if __name__ == "__main__":
    try:
        run_jeeva()
    except KeyboardInterrupt:
        print("\nЁЯСЛ рдЬреАрд╡рди рд╕рд╣рд╛рдпрдХ рдмрдВрдж рд╣реЛ рдЧрдпрд╛ред")
